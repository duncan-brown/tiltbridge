<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>TiltBridge - Calibration</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <link rel="icon" href="favicon.ico" type="image/x-icon">

    <style>
        body {padding-top: 5rem; padding-bottom: 5rem;}

        .row-padded {
            padding: 0.75rem 1.25rem;
        }

        .ledreddim {
            background: #DE912F;
        }

        .ledgreen {
            background: #70FC57;
        }

        .round-led-circle {
            width: 16px;
            height: 0;
            padding-bottom: 16px;
            border-radius: 50%;
            border-style: outset;
            overflow: hidden;
            display: inline-block;
        }

        span.round-led {
            width: 15px;
            height: 15px;
            display: table-cell;
            text-align: center;
            vertical-align: middle;
            font-weight: bold;
            text-decoration: none;
        }

        #graph {
            width: 500px;
            height: 300px;
        }
    </style>
</head>

<body onload="loaded()">

<nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">
    <a class="navbar-brand" href="/">TiltBridge</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsMain" aria-controls="navbarsMain" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarsMain">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/settings/">Settings</a>
            </li>
            <li class="nav-item active">
                <a class="nav-link" href="/calibration/">Calibration <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/about/">About</a>
            </li>
        </ul>
    </div>
</nav>

<main role="main" class="container">

    <h4>Calibration</h4>

    <div id="settingsapp">
        <div class="row row-padded">
            <div class="col-12">
                <div class="card">
                    <h5 class="card-header">
                        Clear Calibration
                    </h5>
                    <div class="card-body">
                        <p class="card-text">Select the tilt color to delete the current calibration. The current calibration should be deleted before re-calibrating the Tilt.</p>
                        <form action="/calibration/clear/" method="POST">
                            <div class="form-group row">
                                <label for="clearTiltColor" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Select the color of the tilt to calibrate">Tilt Color</label>
                                <div class="col-sm-8">
                                    <select class="form-control" name="clearTiltColor" id="clearTiltColor">
                                        <option value="0">Red</option>
                                        <option value="1">Green</option>
                                        <option value="2">Black</option>
                                        <option value="3">Purple</option>
                                        <option value="4">Orange</option>
                                        <option value="5">Blue</option>
                                        <option value="6">Yellow</option>
                                        <option value="7">Pink</option>
                                    </select>
                                </div>
                                <div class="col-sm-2"><button type="submit" class="btn btn-primary">Clear</button></div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="row row-padded">
            <div class="col-12">
                <div class="card">
                    <h5 class="card-header">
                        Calibrate Tilt
                    </h5>
                    <div class="card-body">
                        <p class="card-text">Select the tilt color that is being calibrated. Once you have entered the calibration details in the form below you can update the calibration parameters.</p>
                        <form action="/calibration/update/" method="POST">
                            <div class="form-group row">
                                <label for="updateTiltColor" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Select the color of the tilt to calibrate">Tilt Color</label>
                                <div class="col-sm-8">
                                    <select class="form-control" name="updateTiltColor" id="updateTiltColor">
                                        <option value="0">Red</option>
                                        <option value="1">Green</option>
                                        <option value="2">Black</option>
                                        <option value="3">Purple</option>
                                        <option value="4">Orange</option>
                                        <option value="5">Blue</option>
                                        <option value="6">Yellow</option>
                                        <option value="7">Pink</option>
                                    </select>
                                </div>
                                <div class="col-sm-2"><button type="submit" class="btn btn-primary">Update</button></div>
                            </div>
                        </form>
                        <p><span id="firstpoly"></span></p>
                        <p><span id="secondpoly"></span></p>
                        <p><span id="thirdpoly"></span></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row row-padded">
            <div class="col-12">
                <div class="card">
                    <h5 class="card-header">
                        Add Calibration Point
                    </h5>

                    <div class="card-body">
                        <p class="card-text">Add a calibration data point.</p>
                        <div class="form-group row">
                            <label for="gu_select" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Select either specific gravity or degrees Plato">Gravity Unit</label>
                            <div class="col-sm-8">
                                <select class="form-control" name="gu_select" id="gu_select" onchange="gravityunitchange()">
                                    <option value="gu_sg" selected>Specific Gravity</option>
                                    <option value="gu_plato">Degrees Plato</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="instrument" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Select either hydrometer or refractometer">Measurement</label>
                            <div class="col-sm-8">
                                <select class="form-control" name="instrument" id="instrument" onchange="instrumentchange()">
                                    <option value="hydro">Hydrometer</option>
                                    <option value="refrac" selected="selected">Refractometer</option>
                                </select>
                            </div>
                        </div>

                        <div id="hydrometer_input">
                            <div class="form-group row">
                                <label for="sginput" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Actual gravity of calibration sample">Reading</label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control" name="sginput" id="sginput" onchange="sgchanged()">
                                </div>
                            </div>

                            <p class="card-text">If the hydrometer reading is temperature corrected, check the box and enter the correction below.</p>

                            <div class="form-group form-check">
                                <input type="checkbox" class="form-check-input" id="tempcorrect" onchange="sgchanged()"></input>
                                <label for="tempcorrect" class="form-check-label" data-toggle="tooltip" title="Check if temperature correction should be applied">Apply correction</label>
                            </div>

                            <div class="form-group row">
                                <label for="worttemp" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Actual gravity of calibration sample">Wort temperature</label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control" name="worttemp" id="worttemp" onchange="sgchanged()">
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="sgcorrect" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Actual hydrometer reading of calibration sample">Calibration temperature</label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control" name="sgcorrect" id="sgcorrect" onchange="sgchanged()">
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="tu_select" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Select either hydrometer or refractometer">Measurement</label>
                                <div class="col-sm-8">
                                    <select class="form-control" name="tu_select" id="tu_select" onchange="tempunitchange()">
                                        <option value="C" selected>Celsius (C)</option>
                                        <option value="F">Fahrenheit (&deg;F)</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div id="refractometer_input">
                            <div class="form-group row">
                                <label for="brixinput" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Actual refractometer reading of calibration sample">Reading</label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control" name="brixinput" id="brixinput" onchange="brixchanged()">
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="wortcorrect" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Refractometer wort correction factor">Wort correction</label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control" name="wortcorrect" id="wortcorrect" value="1.0" onchange="brixchanged()">
                                </div>
                            </div>
                        </div>

                        <fieldset id="inputpoints">
                            <div class="form-group row">
                                <label for="tiltinput" class="col-sm-2 col-form-label" data-toggle="tooltip" title="Reading displayed on the uncalibrated Tilt">Tilt Reading</label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control" name="tiltinput" id="tiltinput" onchange="sgchanged()">
                                </div>
                            </div>


                            <div id="result_sg">
                                <div class="form-group row">
                                    <label for="tiltinput" class="col-sm-2 col-form-label" data-toggle="tooltip" title="The actual gravity of the sample (SG)">Actual value</label>
                                    <div class="col-sm-8">
                                        <input type="text" name="sg_result" id="sg_result" class="form-control" readonly>
                                    </div>
                                    <div class="col-sm-2"><button onclick="TiltPoints.adddata();" class="btn btn-primary">Add</button></div>
                                </div>
                            </div>

                            <div id="result_plato">
                                <div class="form-group row">
                                    <label for="tiltinput" class="col-sm-2 col-form-label" data-toggle="tooltip" title="The actual gravity of the sample (&deg;P)">Actual value</label>
                                    <div class="col-sm-8">
                                        <input type="text" name="brix_result" id="brix_result" class="form-control" readonly>
                                    </div>
                                    <div class="col-sm-2"><button onclick="TiltPoints.adddata();" class="btn btn-primary">Add</button></div>
                                </div>
                            </div>
                        </fieldset>

                    </div>
                </div>
            </div>
        </div>
        <div class="row row-padded">
            <div class="col-12">
                <div class="card">
                    <h5 class="card-header">
                       Calibration Data
                    </h5>
                    <table id="pointlist" class="card-table table">
                        <div id="result_sg">
                            <tr>
                                <th>Tilt Reading</th>
                                <th>Reference Gravity (SG)</th>
                                <th>x<sub>0</sub></th>
                                <th>&delta;x<sub>0</sub></th>
                                <th>x<sub>1</sub></th>
                                <th>&delta;x<sub>1</sub></th>
                                <th>x<sub>2</sub></th>
                                <th>&delta;x<sub>2</sub></th>
                                <th></th>
                            </tr>
                        </div>
                        <div id="result_plato">
                            <tr>
                                <th>Tilt Reading</th>
                                <th>Reference Gravity (&deg;P)</th>
                                <th>x<sub>0</sub></th>
                                <th>&delta;x<sub>0</sub></th>
                                <th>x<sub>1</sub></th>
                                <th>&delta;x<sub>1</sub></th>
                                <th>x<sub>2</sub></th>
                                <th>&delta;x<sub>2</sub></th>
                                <th></th>
                            </tr>
                        </div>
                    </table>
                    <table class="card-table table" align="center">
                        <tr scope="col" align="center">
                            <td>
                                <div id="graph"></div>
                            </td>
                        <tr>
                    </table>
                </div>
             </div>
         </div>

     </div>

</main>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.7/dist/vue.min.js"></script>

<script type="text/javascript">
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });

    var vm = new Vue({
        el: '#settingsapp',
        data: {
            settings: []
        },
        mounted: function () {
            this.getSettings();
        },
        methods: {
            getSettings: function() {
                var xhr = new XMLHttpRequest();
                var self = this;
                xhr.open('GET', '/settings/json/');
                xhr.onload = function () {
                    self.settings = JSON.parse(xhr.responseText);
                };
                xhr.send()
            }
        }
    });
</script>

<script src="https://Tom-Alexander.github.io/regression-js/jquery.flot.js"></script>

<script>
    /* Regression.JS */
    /* the librar is embedded for your convenience .*/
    /**
     * @license
     *
     * Regression.JS - Regression functions for javascript
     * http://tom-alexander.github.com/regression-js/
     *
     * copyright(c) 2013 Tom Alexander
     * Licensed under the MIT license.
     *
     * @module regression - Least-squares regression functions for JavaScript
     **/
    ! function(a, b) {
        var c;
        return c = "function" == typeof define && define.amd ? define("regression", b) : "undefined" != typeof module ? module.exports = b() : a.regression = b()
    }(this, function() {
        "use strict";

        function a(a, b) {
            var c = a.reduce(function(a, b) {
                    return a + b[1]
                }, 0),
                d = c / a.length,
                e = a.reduce(function(a, b) {
                    var c = b[1] - d;
                    return a + c * c
                }, 0),
                f = a.reduce(function(a, c, d) {
                    var e = b[d],
                        f = c[1] - e[1];
                    return a + f * f
                }, 0);
            return 1 - f / e
        }

        function b(a, b) {
            var c = 0,
                d = 0,
                e = 0,
                f = 0,
                g = 0,
                h = a.length - 1,
                i = new Array(b);
            for (c = 0; h > c; c++) {
                for (f = c, d = c + 1; h > d; d++) Math.abs(a[c][d]) > Math.abs(a[c][f]) && (f = d);
                for (e = c; h + 1 > e; e++) g = a[e][c], a[e][c] = a[e][f], a[e][f] = g;
                for (d = c + 1; h > d; d++)
                    for (e = h; e >= c; e--) a[e][d] -= a[e][c] * a[c][d] / a[c][c]
            }
            for (d = h - 1; d >= 0; d--) {
                for (g = 0, e = d + 1; h > e; e++) g += a[e][d] * i[e];
                i[d] = (a[h][d] - g) / a[d][d]
            }
            return i
        }

        function c(a, b) {
            var c = Math.pow(10, b);
            return Math.round(a * c) / c
        }
        var d, e = 2,
            f = {
                linear: function(b, d, e) {
                    for (var f, g, h, i = [0, 0, 0, 0, 0], j = b.length, k = 0; j > k; k++) null !== b[k][1] && (i[0] += b[k][0], i[1] += b[k][1], i[2] += b[k][0] * b[k][0], i[3] += b[k][0] * b[k][1], i[4] += b[k][1] * b[k][1]);
                    return g = (j * i[3] - i[0] * i[1]) / (j * i[2] - i[0] * i[0]), h = i[1] / j - g * i[0] / j, f = b.map(function(a) {
                        var b = a[0];
                        return [b, g * b + h]
                    }), {
                        r2: a(b, f),
                        equation: [g, h],
                        points: f,
                        string: "y = " + c(g, e.precision) + "x + " + c(h, e.precision)
                    }
                },
                linearthroughorigin: function(b, d, e) {
                    for (var f, g, h = [0, 0], i = 0; i < b.length; i++) null !== b[i][1] && (h[0] += b[i][0] * b[i][0], h[1] += b[i][0] * b[i][1]);
                    return f = h[1] / h[0], g = b.map(function(a) {
                        var b = a[0];
                        return [b, f * b]
                    }), {
                        r2: a(b, g),
                        equation: [f],
                        points: g,
                        string: "y = " + c(f, e.precision) + "x"
                    }
                },
                exponential: function(b, d, e) {
                    for (var f, g, h, i, j = [0, 0, 0, 0, 0, 0], k = 0; k < b.length; k++) null !== b[k][1] && (j[0] += b[k][0], j[1] += b[k][1], j[2] += b[k][0] * b[k][0] * b[k][1], j[3] += b[k][1] * Math.log(b[k][1]), j[4] += b[k][0] * b[k][1] * Math.log(b[k][1]), j[5] += b[k][0] * b[k][1]);
                    return f = j[1] * j[2] - j[5] * j[5], g = Math.exp((j[2] * j[3] - j[5] * j[4]) / f), h = (j[1] * j[4] - j[5] * j[3]) / f, i = b.map(function(a) {
                        var b = a[0];
                        return [b, g * Math.exp(h * b)]
                    }), {
                        r2: a(b, i),
                        equation: [g, h],
                        points: i,
                        string: "y = " + c(g, e.precision) + "e^(" + c(h, e.precision) + "x)"
                    }
                },
                logarithmic: function(b, d, e) {
                    for (var f, g, h, i = [0, 0, 0, 0], j = b.length, k = 0; j > k; k++) null !== b[k][1] && (i[0] += Math.log(b[k][0]), i[1] += b[k][1] * Math.log(b[k][0]), i[2] += b[k][1], i[3] += Math.pow(Math.log(b[k][0]), 2));
                    return g = (j * i[1] - i[2] * i[0]) / (j * i[3] - i[0] * i[0]), f = (i[2] - g * i[0]) / j, h = b.map(function(a) {
                        var b = a[0];
                        return [b, f + g * Math.log(b)]
                    }), {
                        r2: a(b, h),
                        equation: [f, g],
                        points: h,
                        string: "y = " + c(f, e.precision) + " + " + c(g, e.precision) + " ln(x)"
                    }
                },
                power: function(b, d, e) {
                    for (var f, g, h, i = [0, 0, 0, 0], j = b.length, k = 0; j > k; k++) null !== b[k][1] && (i[0] += Math.log(b[k][0]), i[1] += Math.log(b[k][1]) * Math.log(b[k][0]), i[2] += Math.log(b[k][1]), i[3] += Math.pow(Math.log(b[k][0]), 2));
                    return g = (j * i[1] - i[2] * i[0]) / (j * i[3] - i[0] * i[0]), f = Math.exp((i[2] - g * i[0]) / j), h = b.map(function(a) {
                        var b = a[0];
                        return [b, f * Math.pow(b, g)]
                    }), {
                        r2: a(b, h),
                        equation: [f, g],
                        points: h,
                        string: "y = " + c(f, e.precision) + "x^" + c(g, e.precision)
                    }
                },
                polynomial: function(d, e, f) {
                    var g, h, i, j, k, l, m, n, o = [],
                        p = [],
                        q = 0,
                        r = 0,
                        s = d.length;
                    for (h = "undefined" == typeof e ? 3 : e + 1, i = 0; h > i; i++) {
                        for (k = 0; s > k; k++) null !== d[k][1] && (q += Math.pow(d[k][0], i) * d[k][1]);
                        for (o.push(q), q = 0, g = [], j = 0; h > j; j++) {
                            for (k = 0; s > k; k++) null !== d[k][1] && (r += Math.pow(d[k][0], i + j));
                            g.push(r), r = 0
                        }
                        p.push(g)
                    }
                    for (p.push(o), m = b(p, h), l = d.map(function(a) {
                            var b = a[0],
                                c = m.reduce(function(a, c, d) {
                                    return a + c * Math.pow(b, d)
                                }, 0);
                            return [b, c]
                        }), n = "y = ", i = m.length - 1; i >= 0; i--) n += i > 1 ? c(m[i], f.precision) + "x^" + i + " + " : 1 === i ? c(m[i], f.precision) + "x + " : c(m[i], f.precision);
                    return {
                        r2: a(d, l),
                        equation: m,
                        points: l,
                        string: n
                    }
                },
                lastvalue: function(b, d, e) {
                    for (var f = [], g = null, h = 0; h < b.length; h++) null !== b[h][1] && isFinite(b[h][1]) ? (g = b[h][1], f.push([b[h][0], b[h][1]])) : f.push([b[h][0], g]);
                    return {
                        r2: a(b, f),
                        equation: [g],
                        points: f,
                        string: "" + c(g, e.precision)
                    }
                }
            };
        return d = function(a, b, c, d) {
            var g = "object" == typeof c && "undefined" == typeof d ? c : d || {};
            return g.precision || (g.precision = e), "string" == typeof a ? f[a.toLowerCase()](b, c, g) : null
        }
    });
    /*** end of Regression.JS **/
    function C2F(c) {
        return (c * 1.8 + 32);
    }

    var BrewMath = {
        plato2sg: function(plato) {
            return 1 + plato / (258.6 - ((plato / 258.2) * 227.1));
            // SG = 1+ (plato / (258.6 – ( (plato/258.2) *227.1) ) )
        },
        sg2brix: function(sg) {
            //Brix = (((182.4601 * SG -775.6821) * SG +1262.7794) * SG -669.5622)
            return ((182.4601 * sg - 775.6821) * sg + 1262.7794) * sg - 669.5622;
        },
        sg2plato: function(sg) {
            //plato = (-1 * 616.868) + (1111.14 * sg) – (630.272 * sg^2) + (135.997 * sg^3)
            return -616.868 + (1111.14 * sg) - (630.272 * sg * sg) + (135.997 * sg * sg * sg);
        },
        sgTempCorrectedC: function(Reading, C, CT) {
            return BrewMath.sgTempCorrected(Reading, C2F(C), C2F(CT));
        },
        sgTempCorrected: function(Reading, F, CT) {
            return Reading * ((1.00130346 - 0.000134722124 * F + 0.00000204052596 * F * F - 0.00000000232820948 * F * F * F) / (1.00130346 - 0.000134722124 * CT + 0.00000204052596 * CT * CT - 0.00000000232820948 * CT * CT * CT));
        },
        brix2sg: function(brix, wc) {
            wc = (typeof wc === "undefined") ? 1.0 : wc;
            var bi = brix / wc;
            return (bi / (258.6 - ((bi / 258.2) * 227.1))) + 1;
        }
    };


    function applyTempCal() {
        var cal = parseFloat($("#tempcalvalue").val());
        if (isNaN(cal)) {
            alert("invalid calibration value");
            return;
        }
        console.log("temp cal:" + cal);
        s_ajax({
            url: tcurl,
            m: "POST",
            data: "tc=" + cal,
            success: function(d) {
                alert("done");
            },
            fail: function(d) {
                alert("failed:" + d);
            }
        });
    }

    function setSg(sgn, bx) {
        $("#sgvalue").html(sgn.toFixed(3));
        $("#brixvalue").html(bx.toFixed(1));
        window.sg = sgn;
        window.brix = bx;
        document.getElementById('sg_result').value = sgn.toFixed(3);
        document.getElementById('brix_result').value = bx.toFixed(1);
    }

    function sgchanged() {
        var sg = parseFloat($("#sginput").val());
        if (isNaN(sg)) return;
        var temp = parseFloat($("#worttemp").val());
        if (isNaN(temp)) return;

        var tc = $("#tempcorrect").prop("checked");
        var ct = $("#sgcorrect").val().trim();
        var useF = window.temp_unit == "F";
        //clear brix to avoid confusing
        $("#brixinput").val("");
        var sgn = tc ? (useF ? BrewMath.sgTempCorrected(sg, temp, ct) : BrewMath.sgTempCorrectedC(sg, temp, ct)) : sg;
        var bx = BrewMath.sg2plato(sgn);
        setSg(sgn, bx);
    }

    function brixchanged() {
        var brix = $("#brixinput").val().trim();
        if (brix == "") return;
        var wc = $("#wortcorrect").val().trim();

        $("#sginput").val("");
        var bx = parseFloat(brix) / parseFloat(wc);
        var sgn = BrewMath.plato2sg(bx);
        setSg(sgn, bx);
    }

    var TiltPoints = {
        points: [],
        clear: function() {
            var tbody = document.getElementById("pointlist").getElementsByTagName("tbody")[0];
            var rl = tbody.getElementsByTagName("tr");
            var count = rl.length;
            for (var i = rl.length - 1; i > 0; i--) {
                var tr = rl[i];
                tr.parentNode.removeChild(tr);
            }
            return tbody;
        },
        del: function(i) {
            console.log("delete " + i);
            this.points.splice(i, 1);
            this.list();
        },
        newrow: function(i) {
            var tr = document.createElement("tr");
            var td1 = document.createElement("td");
            td1.className = "pl_del";
            var db = document.createElement("button");
            db.appendChild(document.createTextNode("Delete"));
            db.classList.add('btn');
            db.classList.add('btn-primary');
            db.onclick = function() {
                TiltPoints.del(i);
            };
            td1.appendChild(db);

            var td2 = document.createElement("td");
            td2.className = "pl_tilt";
            td2.innerHTML = this.points[i][0];
            var td3 = document.createElement("td");

            var precision = window.use_plato ? 2 : 4;

            var td4 = document.createElement("td");
            td4.className = "pl_sg";
            td4.innerHTML = this.points[i][1].toFixed(precision);

            var tdfi = document.createElement("td");
            tdfi.className = "pl_1stvalue";
            tdfi.innerHTML = (typeof window.firstValue != "undefined")? window.firstValue[i].toFixed(precision):"-";

            var tdf = document.createElement("td");
            tdf.className = "pl_1sterror";
            tdf.innerHTML =(typeof window.firstError != "undefined")? window.firstError[i].toFixed(precision):"-";


            var td5i = document.createElement("td");
            td5i.className = "pl_2ndvalue";
            td5i.innerHTML = (typeof window.secValue != "undefined")? window.secValue[i].toFixed(precision):"-";

            var td5 = document.createElement("td");
            td5.className = "pl_2nderror";
            td5.innerHTML =(typeof window.secondError != "undefined")? window.secondError[i].toFixed(precision):"-";

            var td6i = document.createElement("td");
            td6i.className = "pl_3rdvalue";
            td6i.innerHTML =(typeof window.thirdValue != "undefined")? window.thirdValue[i].toFixed(precision):"-";


            var td6 = document.createElement("td");
            td6.className = "pl_3rderror";
            td6.innerHTML =(typeof window.thirdError != "undefined")? window.thirdError[i].toFixed(precision):"-";

            tr.appendChild(td2);
            tr.appendChild(td4);
            tr.appendChild(tdfi);
            tr.appendChild(tdf);
            tr.appendChild(td5i);
            tr.appendChild(td5);
            tr.appendChild(td6i);
            tr.appendChild(td6);
            tr.appendChild(td1);
            return tr;
        },
        list: function() {
            this.regression();
            var tbody = this.clear();
            for (var i = 0; i < this.points.length; i++) {
                tbody.appendChild(this.newrow(i));
            }
        },
        regression: function() {
            $("#firstpoly").html("");
            $("#secondpoly").html("");
            $("#thirdpoly").html("");

            if (this.points.length < 2) return;
            var firstRegression =regression('polynomial', this.points, 1, {
                precision: 9
            });
            var secondRegression,thirdRegression;
            if(this.points.length > 2){
                secondRegression = regression('polynomial', this.points, 2, {
                precision: 9
            });
            }
            if(this.points.length > 3){
                thirdRegression = regression('polynomial', this.points, 3, {
                precision: 9
            });
            }

            // Plot the result
            var lines=[ {
                    data: firstRegression.points,
                    label: '1st'
                    },
                {
                data: this.points,
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            } ];
            if(this.points.length > 2){
               lines.push({
                    data: secondRegression.points,
                    label: '2nd'
                });
            }
            if(this.points.length > 3){
               lines.push( {
                data: thirdRegression.points,
                label: '3rd'
                });
            }

            $.plot($('#graph'), lines);
            $("#firstpoly").html(firstRegression.string);
            if(this.points.length > 2) $("#secondpoly").html(secondRegression.string);
            if(this.points.length > 3) $("#thirdpoly").html(thirdRegression.string);
            // caluate errors
            var secoe, thridoe;

            var first_error = [];
            var first_value = [];
            var firstoe = firstRegression.equation;

            var sec_error = [];
            var sec_value = [];
            if(this.points.length > 2) secoe = secondRegression.equation;

            var third_error = [];
            var third_value = [];
            if(this.points.length > 3) thirdcoe = thirdRegression.equation;

            for (var i = 0; i < this.points.length; i++) {
                var x = this.points[i][0];
                var x2 = x * x;
                var x3 = x2 * x;
                var y = this.points[i][1]

                var f = firstoe[0] + firstoe[1] * x;
                first_error.push(f - y);
                first_value.push(f);

                if(this.points.length > 2){
                    var s = secoe[0] + secoe[1] * x + secoe[2] * x2;
                    sec_error.push(s - y);
                    sec_value.push(s);
                }

                if(this.points.length > 3){
                    var t = thirdcoe[0] + thirdcoe[1] * x + thirdcoe[2] * x2 + thirdcoe[3] * x3;
                    third_error.push(t - y);
                    third_value.push(t);
                }
            }
            window.firstError = first_error;
            window.equation1st = firstoe;
            window.firstValue = first_value;
            if(this.points.length > 2){
                window.secondError = sec_error;
                window.equation2nd = secoe;
                window.secValue = sec_value;
            }else if (typeof  window.secondError != "undefined"){
                delete( window.secondError);
                delete( window.equation2nd);
                delete( window.secValue);
            }

            if(this.points.length > 3){
                window.equation3rd = thirdcoe;
                window.thirdValue = third_value;
                window.thirdError = third_error;
            }else if (typeof  window.equation3rd != "undefined"){
                delete( window.equation3rd);
                delete( window.thirdValue);
                delete( window.thirdError);
            }

        },
        adddata: function() {
            var tilt = parseFloat($("#tiltinput").val());
            var gravity = window.use_plato ? window.brix : window.sg;
            if (isNaN(tilt) || isNaN(gravity)) {
                alert("invalid value");
                return;
            }
            this.points.push([tilt,gravity]);
            this.points.sort(function(a, b) {
                return a[0] - b[0];
            });
            this.list();
        },
        change_gu: function() {

            for (var i = 0; i < this.points.length; i++) {
                this.points[i][1] = window.use_plato ? BrewMath.sg2plato(this.points[i][1]) : BrewMath.plato2sg(this.points[i][1]);
            }
            this.list();
        }
    };

    function temperatureunit(celisus) {
        window.temp_unit = celisus ? "C" : "F";
    }

    function tempunitchange() {
        temperatureunit($("#tu_select").val() == "C");
    }

    function using_plato(plato) {
        window.use_plato = plato;
        if (plato) {
            $("#result_sg").hide();
            $("#result_plato").show();
        } else {
            $("#result_sg").show();
            $("#result_plato").hide();
        }
        TiltPoints.change_gu();
    }

    function gravityunitchange() {
        using_plato($("#gu_select").val() == "gu_plato");
    }

    function instrument(hydro) {
        if (hydro) {
            $("#hydrometer_input").show();
            $("#refractometer_input").hide();
        } else {
            $("#hydrometer_input").hide();
            $("#refractometer_input").show();
        }
    }

    function instrumentchange() {
        instrument($("#instrument").val() == "hydro");
    }

    function loaded() {
        //default to sg
        using_plato(true);
        instrument(false);
    }
</script>


</body>
</html>
