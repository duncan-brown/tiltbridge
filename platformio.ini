; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[common]
platform = espressif32
framework = arduino
; As the framework has grown, min_spiffs no longer has enough space. We're now
; requiring 16MB of flash space for most builds (which comes standard with the
; recommended D32 Pro)
board_build.partitions = large_spiffs_16MB.csv
upload_speed = 460800
monitor_speed = 115200
monitor_filters =
    esp32_exception_decoder
    ; log2file
; Ths can/will be set in tools/get_port.py
; upload_port = 
; monitor_port = 
monitor_dtr = 0
monitor_rts = 0
; -D_GLIBCXX_USE_C99 is to fix an issue with the xtensa toolchain that precludes the use of std::to_string
; See: https://github.com/espressif/esp-idf/issues/1445
build_flags =                           ; Do not use spaces around the "=" here, will give you a builder not found error
    !python tools/git_rev.py            ; Pick up git information for version (disabled), branch, and commit (in version.cpp)
    -D BAUD=${common.monitor_speed}
    -D CONFIG_ASYNC_TCP_RUNNING_CORE=1  ; per: https://github.com/me-no-dev/ESPAsyncWebServer/issues/731#issuecomment-628163515
    -D CONFIG_ASYNC_TCP_USE_WDT=1
    -D_GLIBCXX_USE_C99                  ; See above
    -D PIO_SRC_TAG=0.2.2                ; Increment versions shown in about.htm page (from version.cpp)
    -D ARDUINO_LOG_LEVEL=6              ; Set Serial log level (0 = disable)
    -D DOTELNET=1                       ; Allow Telnet serial logging
    -D FILESYSTEM=SPIFFS                ; Define filesystem in use
    ; -D FSEDIT                           ; Use a filesystem editor - this seems to frag the memory so it is a bad idea right now
    ; -D LOG_LOCAL_LEVEL=ESP_LOG_VERBOSE  ; Use ESP Logging
extra_scripts = tools/get_port.py       ; Pick up port information based on OS
lib_deps =
    bblanchon/ArduinoJson
    https://github.com/thijse/Arduino-Log.git
    https://github.com/lbussy/esptelnet.git
    https://github.com/h2zero/NimBLE-Arduino.git
    https://github.com/256dpi/arduino-mqtt.git
    https://github.com/me-no-dev/ESPAsyncWebServer.git
    https://github.com/lbussy/AsyncWiFiManager.git#development
build_type = debug ; release

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Individual build configurations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[env:lcd_ssd1306]
board = lolin_d32
platform = ${common.platform}
framework = ${common.framework}
; For the "OLED" variant, we can't guarantee we have more than 4MB of flash. Use
; huge_app to get us the space - but at the cost of being able to update OTA.
board_build.partitions = huge_app.csv
upload_speed = ${common.upload_speed}
monitor_speed = ${common.monitor_speed}
monitor_filters = ${common.monitor_filters}
; Ths can/will be set in tools/get_port.py
; upload_port = ${common.upload_port}
; monitor_port = ${common.monitor_port}
monitor_dtr = ${common.monitor_dtr}
monitor_rts = ${common.monitor_rts}
build_flags =
    ${common.build_flags}
    -DLCD_SSD1306
    -DDISABLE_OTA_UPDATES
lib_deps =
    ${common.lib_deps}
    ESP8266_SSD1306
build_type = ${common.build_type}

[env:d32_pro_tft]
board = lolin_d32_pro
platform = ${common.platform}
framework = ${common.framework}
board_build.partitions = ${common.board_build.partitions}
upload_speed = ${common.upload_speed}
monitor_speed = ${common.monitor_speed}
monitor_filters = ${common.monitor_filters}
; Ths can/will be set in tools/get_port.py
; upload_port = {common.upload_port}
; monitor_port = ${common.monitor_port}
monitor_dtr = ${common.monitor_dtr}
monitor_rts = ${common.monitor_rts}
build_flags =
    ${common.build_flags}
    -DLCD_TFT
    ; -DCORE_DEBUG_LEVEL=5
lib_deps =
    ${common.lib_deps}
    Adafruit GFX Library@1.7.5
    Adafruit ILI9341
    https://github.com/PaulStoffregen/XPT2046_Touchscreen
build_type = ${common.build_type}

[env:tft_espi]
; This is configured for a TTGO T-Display using the tft_espi drivers
; it should work for other tft_espi compatible displays, if you tweak
; the defines appropriately. See the documentation for TFT_eSPI at
; https://github.com/Bodmer/TFT_eSPI
board = esp32dev
platform = ${common.platform}
framework = ${common.framework}
; The T-Display has 4MB of flash. Use huge_app to get us the space - but
; at the cost of being able to update OTA.
board_build.partitions = huge_app.csv
upload_speed = ${common.upload_speed}
monitor_speed = ${common.monitor_speed}
monitor_filters = ${common.monitor_filters}
; Ths can/will be set in tools/get_port.py
; upload_port = -DUSBC
; monitor_port = -DUSBC
monitor_dtr = ${common.monitor_dtr}
monitor_rts = ${common.monitor_rts}
build_flags =
    ${common.build_flags}
    -DLCD_TFT_ESPI
    -DDISABLE_OTA_UPDATES
    -DUSER_SETUP_LOADED=1
    -DST7789_DRIVER=1
    -DTFT_WIDTH=135
    -DTFT_HEIGHT=240
    -DCGRAM_OFFSET=1
    -DTFT_MISO=-1
    -DTFT_MOSI=19
    -DTFT_SCLK=18
    -DTFT_CS=5
    -DTFT_DC=16
    -DTFT_RST=23
    -DTFT_BL=4
    -DTFT_BACKLIGHT_ON=1
    -DLOAD_GLCD=1
    -DLOAD_FONT4=1
lib_deps =
    ${common.lib_deps}
    TFT_eSPI
build_type = ${common.build_type}